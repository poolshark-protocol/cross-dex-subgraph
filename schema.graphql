type Exchange @entity {
  # factory address
  id: ID!

  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  #totalVolumeETH: BigDecimal!
  #totalVolumeUSD: BigDecimal!

  # pair info
  pairCount: Int!
  pairs: [Pair!]!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  value: BigDecimal! # price of ETH usd
}

type Observation @entity {
  #tknA_address < tknB_address
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactions: [Transaction!]!
  # tknA/tknB price
  volumeWeightedAvgPrice: BigInt!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # price
  ethPrice: BigDecimal!
  usdPrice: BigDecimal!
  
  pairs: [Pair!]!
  exchangeTokens: [ExchangeToken!]!

  # token specific volume
  #tradeVolume: BigDecimal!
  #tradeVolumeUSD: BigDecimal!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!
  #totalLiquidityETH: BigDecimal!
  #totalLiquidityUSD: BigDecimal!
}

type ExchangePair @entity {
  # pool_address
  id: ID!
  exchange: Exchange!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  #token0Volume: BigDecimal!
  #token1Volume: BigDecimal!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!

  twoPercentMarketDepthETH: BigDecimal!
  twoPercentMarketDepthUSD: BigDecimal!

  trackedReserveETH: BigDecimal!

  #volumeUSD: BigDecimal!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  
  updatedAtTimestamp: BigInt!
  updatedAtBlockNumber: BigInt!

  # list of all swap for the pair
  swaps: [Swap!]!
}

type ExchangeToken @entity {
  # token address + factory address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # price
  ethPrice: BigDecimal!
  
  exchangePairs: [ExchangePair!]!

  # token specific volume
  #tradeVolume: BigDecimal!
  #tradeVolumeUSD: BigDecimal!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!
  
}


type Pair @entity {
  # tknA < tknB
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!

  exchangePairs: [ExchangePair!]!

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  # token0Volume: BigDecimal!
  # token1Volume: BigDecimal!

    # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  
  updatedAtTimestamp: BigInt!
  updatedAtBlockNumber: BigInt!
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  
  mints: [Mint!]!
  burns: [Burn!]!
  swaps: [Swap!]!
}

# calculate reserve changes to create Mint
type Mint @entity {
  # if exists add to values
  # transaction hash + pair
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
}

# calculate reserve changes to create Burn
type Burn @entity {
  # TODO: if exists add to values
  # transaction hash + pair
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

}

# calculate swap amount and volume based on reserve changes
type Swap @entity {
  # if exists add to values
  # transaction hash + pair + fromToken
  id: ID!
  exchange: Exchange!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  amountUSD: BigDecimal!
  # note for orderbook: do not emit until fulfilled
  # emit 2 events on fulfill
  # sender/from/to is fulfiller
  # 2nd event (for provider) - sender/from/to is empty
  # 1 of them will have empty fields
  to: Bytes!
  logIndex: BigInt

}